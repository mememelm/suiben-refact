import { Injectable } from '@angular/core';
import { Exploitant } from '../constant/';
import { AngularFireDatabase, AngularFireList, AngularFireObject } from '@angular/fire/database';
import { map } from 'rxjs/operators';
import { FormArray, FormControl, FormGroup, Validators } from '@angular/forms';
import { DatePipe } from '@angular/common';


@Injectable({
    providedIn: 'root'
})
export class ExploitantService {

    public exploitantDetailFrom: FormGroup;
    public urlExploitant = '/exploitants';
    public urlCedar = '/Cedar';
    public exploitantsRef: AngularFireList<Exploitant> = null;

    exploitantKey: string;

    constructor(
        public angularFireDatabase: AngularFireDatabase,
        public datePipe: DatePipe
    ) {
        this.exploitantKey = this.angularFireDatabase.database.ref().child('exploitantId').push().key
    }

    formExploitantDetailControl(arg) {
        this.exploitantDetailFrom = new FormGroup({
            exploitantFirstName: new FormControl(arg.argObjet.exploitantFirstName),
            exploitantLastName: new FormControl(arg.argObjet.exploitantLastName),
            exploitantDate: new FormControl(this.datePipe.transform(arg.argObjet.exploitantDate, 'd MMMM y')),
            exploitantState: new FormControl(arg.argObjet.exploitantState),
            exploitantSex: new FormControl(arg.argObjet.exploitantSex)
        });
    }

    getExploitantList(): AngularFireList<Exploitant> {
        return this.exploitantsRef = this.angularFireDatabase.list(this.urlExploitant, ref => ref.orderByChild('exploitantDate'))
    }

    getExploitantById(id: string) {
        return this.angularFireDatabase.list(this.urlExploitant).snapshotChanges().pipe(
            map((data: any[]) => data.map(res => {
                if (id !== 'tous') {
                    if (res.payload.val().exploitantCedar === id) {
                        const payload = res.payload.val()
                        const key = res.key
                        return <any>{ key, ...payload }
                    }
                } else {
                    const payload = res.payload.val()
                    const key = res.key
                    return <any>{ key, ...payload }
                }
            }))
        )
    }

    getFormationById(id: string) {
        return this.angularFireDatabase.list(this.urlCedar).snapshotChanges().pipe(
            map((data: any[]) => data.map(res => {
                if (res.payload.val().exploitantId === id) {
                    const payload = res.payload.val().formations
                    return <any>{ ...payload }
                }
            }))
        )
    }

    getInnovAcquiById(id: string) {
        return this.angularFireDatabase.list(this.urlCedar).snapshotChanges().pipe(
            map((data: any[]) => data.map(res => {
                if (res.payload.val().exploitantId === id) {
                    const payloadAcqui = res.payload.val().innoAcqui
                    return <any>{ ...payloadAcqui }
                }
            })),
        );
    }

    getInnovAppliById(id: string) {
        return this.angularFireDatabase.list(this.urlCedar).snapshotChanges().pipe(
            map((data: any[]) => data.map(res => {
                if (res.payload.val().exploitantId === id) {
                    const payloadAppli = res.payload.val().innoAppli
                    return <any>{ ...payloadAppli }
                }
            }))
        )
    }

    getInnovPersoById(id: string) {
        return this.angularFireDatabase.list(this.urlCedar).snapshotChanges().pipe(
            map((data: any[]) => data.map(res => {
                if (res.payload.val().exploitantId === id) {
                    const payloadPerso = res.payload.val().innoPerso
                    return <any>{ ...payloadPerso }
                }
            }))
        )
    }
}
