import { Component, OnInit } from '@angular/core';
import { ExploitantService, DomaineService } from '../../../services';
import { map } from 'rxjs/operators';
import { MatTableDataSource } from '@angular/material/table';
import { ModalService } from '../../../services/modal.service';
import { ExploitantDetailComponent } from '../..';
import { DatePipe } from "@angular/common";


@Component({
    selector: 'app-exploitant-list',
    templateUrl: './exploitant-list.component.html',
    styleUrls: ['./exploitant-list.component.css'],
})
export class ExploitantListComponent implements OnInit {

    title = 'exploitants'
    // exploitants = new MatTableDataSource<any>();
    exploitants: any
    exploitantsListNumber: number;
    domaines: any;
    data: any;

    filteredDataAfterDate: any

    loading: any

    constructor(
        public exploitantService: ExploitantService,
        public matDialog: ModalService,
        private datePipe: DatePipe,
        private domaineService: DomaineService
    ) { }

    ngOnInit(): void {
        this.loading = true
        this.loadExploitantList();
        this.loadDomaineList()
    }

    loadExploitantList() {
        this.exploitantService.getExploitantList().snapshotChanges().pipe(
            map(changes => changes.map(c => ({ key: c.payload.key, ...c.payload.val() }))))
            .subscribe(exploitants => {
                this.exploitants = new MatTableDataSource<any>(exploitants);
                // for (var i = 0; i < exploitants.length; i++) {
                //     setTimeout(() => {
                //         console.log([this.exploitants.filteredData[i].exploitantDate, this.exploitants.filteredData[i]])                    
                //         this.orderBy(this.exploitants.filteredData[i])
                //     }, 10000)                    
                // }                
                // this.exploitants = exploitants
                this.exploitantsListNumber = exploitants.length                
                this.loading = false
            })
    }

    openDialogDetailsExploitant(arg) {
        this.matDialog.openModal(ExploitantDetailComponent, '65%', '75%', { argObjet: arg });
    }

    onExploitantChange(arg) {
        const exploitantsListObj = [];
        this.exploitantService.getExploitantById(arg).subscribe(
            exploitants => {
                for (var i = 0; i < exploitants.length; i++) {
                    if (exploitants[i] !== undefined)
                        exploitantsListObj.push(exploitants[i]);
                }

                this.exploitants = new MatTableDataSource<any>(exploitantsListObj);
                this.exploitantsListNumber = exploitantsListObj.length;
            }
        );
    }

    applyFilter(filterValue: string) {
        this.exploitants.filter = filterValue.trim().toLowerCase();
    }

    // public orderBy(liste) {
    //     console.log('Traitement filtre  :::::::::::::   ', liste)
    //     this.mySortPriceRecursive(liste, liste.length)
    // }

    // public mySortPriceRecursive(arr, n) {
    //     if (n <= 1) {
    //         return
    //     }

    //     this.mySortPriceRecursive(arr, n - 1)

    //     const last = arr[n - 1];
    //     let j = n - 2;

    //     while (j >= 0 && arr[j].exploitantCommune > last.exploitantCommune) {
    //         arr[j + 1] = arr[j]
    //         j--
    //     }
    //     arr[j + 1] = last
    // }

    public loadDomaineList() {
        this.domaineService.getDomaineList().snapshotChanges().pipe(
            map(changes => changes.map(c => ({ key: c.payload.key, ...c.payload.val() })))
        ).subscribe(domaines => {
            this.domaines = domaines
            // this.domainesLength = domaines.length
        })
    }

    preview() {
        console.log(this.exploitants)
        let printContent = ''
        const WindowObject = window.open('', 'PrintWindow', 'width=750,height=650,top=50,left=50,toolbars=no,scrollbars=yes,status=no,resizable=yes');
        printContent +=
            `<table style="border:1px solid black">
                <thead style="background-color: #007E3A; color:white">
                    <tr>
                        <th>Etat civil</th>
                        <th>Domaine</th>
                        <th>Adhésion</th>
                        <th>Localisation</th> 
                        <th>Activités</th>
                        <th>Spécialité</th>
                    </tr>
                </thead>`;
        this.exploitants.filteredData.map(data => {
            let date = this.datePipe.transform(data.exploitantDate, 'dd MMMM yyyy')
            printContent +=
                `<tbody>
                    <tr style="border:1px solid black; padding: 10px">
                        <td>${data.exploitantFirstName} ${data.exploitantLastName} 
                            <br> ${data.exploitantAge} ans
                        </td>
                        <td>${data.exploitantCedar}</td>
                        <td>${date}</td>
                        <td>${data.exploitantRegion}<br>${data.exploitantDistrict}</td> 
                        <td>${data.exploitantActivite1}<br>${data.exploitantActivite2}</td>
                        <td>${data.exploitantSpeciality1}<br>${data.exploitantSpeciality2}</td>
                    </tr>
                </tbody>`;
            const htmlData = `<html><body>${printContent}</body></html>`;

            WindowObject.document.writeln(htmlData)
            WindowObject.document.close()
            WindowObject.focus()
        })

    }
}