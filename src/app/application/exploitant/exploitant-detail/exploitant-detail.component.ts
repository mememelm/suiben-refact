import { Component, Inject, OnInit } from '@angular/core';
import { ExploitantService, InnovationService, FormationService } from '../../../services';
import { MAT_DIALOG_DATA } from '@angular/material/dialog';
import { single } from './data';
import { FormArray, FormControl, FormGroup, Validators } from '@angular/forms';
import { DatePipe } from '@angular/common';

@Component({
    selector: 'app-exploitant-detail',
    templateUrl: './exploitant-detail.component.html',
    styleUrls: ['./exploitant-detail.component.css']
})
export class ExploitantDetailComponent implements OnInit {

    public year = new Date().getFullYear();
    public single: any[];

    public formationObj = [];
    public formationObjNbr: number;

    public innoAcquiObj = [];
    public innoAcquiObjNbr: number;

    public innoAppliObj = [];
    public innoAppliObjNbr: number;

    public innoPersoObj = [];
    public innoPersoObjNbr: number;

    public view: any[] = [425, 225];

    public exploitantDetailFrom: FormGroup

    // options
    public showXAxis = true;
    public showYAxis = true;
    public gradient = false;
    public showLegend = false;
    public showXAxisLabel = true;
    public showYAxisLabel = true;
    public xAxisLabel = 'Année';
    public yAxisLabel = '%';

    public colorScheme = { domain: ['#5AA454', '#A10A28', '#C7B42C', '#AAAAAA'] };

    // DATA Graphe + table

    public annualProduction: any
    public disponibilityProduction: any
    public surface: any

    chartDatasetsDispo: Array<any>
    chartDatasetsProduction: Array<any>

    public showGraphAgriculutureDispo: boolean
    public showGraphAgriculutureProd: boolean

    public showGraphVege: boolean


    constructor(
        private innovationService: InnovationService,
        private formationService: FormationService,
        private datePipe: DatePipe,
        @Inject(MAT_DIALOG_DATA) public data: any
    ) {
        Object.assign(this, { single })
        this.showGraphAgriculutureDispo = false
        this.showGraphAgriculutureProd = false
    }


    ngOnInit(): void {

        this.showGraphAgriculutureDispo = false
        this.showGraphAgriculutureProd = false

        let dataProd = JSON.parse(localStorage.getItem('marketProductionByExploitant'))
        this.annualProduction = dataProd.annualProduction
        this.disponibilityProduction = dataProd.disponibilityProduction

        this.chartDatasetsDispo = [
            { data: [`${this.disponibilityProduction}`, 7, 6], label: 'Disponibilité production' }
        ]

        this.chartDatasetsProduction = [
            { data: [`${this.annualProduction}`, 654, 700], label: 'Quantité Production' }
        ]

        console.log([this.annualProduction, this.disponibilityProduction])

        this.formExploitantDetailControl(this.data);

        this.formationService.getFormationById(this.data.argObjet.exploitantId)
            .subscribe(data => {
                for (var i = 0; i < data.length; i++) {
                    if (data[i] !== undefined) {
                        for (let j in data[i]) {
                            this.formationObj.push(data[i][j]);
                        }
                    }
                }
                this.formationObjNbr = this.formationObj.length;
            });

        this.innovationService.getInnovAcquiById(this.data.argObjet.exploitantId)
            .subscribe(data => {
                for (var i = 0; i < data.length; i++) {
                    if (data[i] !== undefined) {
                        for (let j in data[i]) {
                            this.innoAcquiObj.push(data[i][j]);
                        }
                    }
                }
                this.innoAcquiObjNbr = this.innoAcquiObj.length;
            });

        this.innovationService.getInnovAppliById(this.data.argObjet.exploitantId)
            .subscribe(data => {
                for (var i = 0; i < data.length; i++) {
                    if (data[i] !== undefined) {
                        for (let j in data[i]) {
                            this.innoAppliObj.push(data[i][j]);
                        }
                    }
                }
                this.innoAppliObjNbr = this.innoAppliObj.length;
            });

        this.innovationService.getInnovPersoById(this.data.argObjet.exploitantId)
            .subscribe(data => {
                for (var i = 0; i < data.length; i++) {
                    if (data[i] !== undefined) {
                        for (let j in data[i]) {
                            this.innoPersoObj.push(data[i][j]);
                        }
                    }
                }
                this.innoPersoObjNbr = this.innoPersoObj.length;
            });
    }

    formExploitantDetailControl(arg) {
        this.exploitantDetailFrom = new FormGroup({
            exploitantFirstName: new FormControl(arg.argObjet.exploitantFirstName),
            exploitantLastName: new FormControl(arg.argObjet.exploitantLastName),
            exploitantDate: new FormControl(this.datePipe.transform(arg.argObjet.exploitantDate, 'd MMMM y')),
            exploitantState: new FormControl(arg.argObjet.exploitantState),
            exploitantSex: new FormControl(arg.argObjet.exploitantSex)
        });
    }

    showGraphAgriculutureDisponibility() {
        this.showGraphAgriculutureDispo = true
        this.showGraphAgriculutureProd = false
        console.log('dispo')
    }

    showGraphAgriculutureProduction() {
        this.showGraphAgriculutureDispo = false
        this.showGraphAgriculutureProd = true
        console.log('prod')
    }

    // GESTION GRAPH
    public chartTypeDispo: string = 'line'

    public chartLabelsDispo: Array<any> = ['Prod init', `${this.year}`, 2021]

    public chartColorsDispo: Array<any> = [
        {
            backgroundColor: 'rgba(105, 0, 132, .2)',
            borderColor: 'rgba(200, 99, 132, .7)',
            borderWidth: 2,
        },
        {
            backgroundColor: 'rgba(0, 137, 132, .2)',
            borderColor: 'rgba(0, 10, 130, .7)',
            borderWidth: 2,
        }
    ]

    public chartOptionsDispo: any = {
        responsive: true
    }
    public chartClicked(e: any): void { }
    public chartHovered(e: any): void { }
}
